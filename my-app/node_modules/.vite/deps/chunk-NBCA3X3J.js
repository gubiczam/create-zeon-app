// node_modules/.pnpm/@usezeon+core@0.0.1/node_modules/@usezeon/core/src/signal.ts
var CURRENT = null;
function signal(v) {
  let val = v;
  const subs = /* @__PURE__ */ new Set();
  const s = {
    get() {
      if (CURRENT) subs.add(CURRENT);
      return val;
    },
    set(n) {
      if (Object.is(n, val)) return;
      val = n;
      subs.forEach((fn) => fn());
    },
    sub(fn) {
      subs.add(fn);
      return () => subs.delete(fn);
    }
  };
  return s;
}
function effect(fn) {
  let cleanups = [];
  const run = () => {
    for (const c of cleanups) c();
    cleanups = [];
    const prev = CURRENT;
    CURRENT = rerun;
    try {
      fn();
    } finally {
      CURRENT = prev;
    }
  };
  const rerun = () => queueMicrotask(run);
  run();
  return () => {
    cleanups.forEach((c) => c());
    cleanups = [];
  };
}
function computed(calc) {
  const s = signal(void 0);
  effect(() => s.set(calc()));
  return { get: () => s.get(), sub: s.sub };
}

export {
  signal,
  effect,
  computed
};
//# sourceMappingURL=chunk-NBCA3X3J.js.map
