{
  "version": 3,
  "sources": ["../../.pnpm/@usezeon+runtime@0.0.1/node_modules/@usezeon/runtime/src/repeat.ts", "../../.pnpm/@usezeon+runtime@0.0.1/node_modules/@usezeon/runtime/src/dom.ts"],
  "sourcesContent": ["import { effect } from \"@usezeon/core\";\n\nexport function repeat<T>(\n  read: () => T[],\n  render: (item: T, key: string | number, idx: number) => Node,\n  keyOf: (item: T, idx: number) => string | number\n) {\n  const anchor = document.createComment(\"repeat\");\n  const map = new Map<string | number, Node>();\n  effect(() => {\n    const parent = anchor.parentNode!;\n    const items = read() ?? [];\n    const next = new Map<string | number, Node>();\n    let cursor: Node = anchor;\n    for (let i = 0; i < items.length; i++) {\n      const it = items[i];\n      const k = keyOf(it, i);\n      let node = map.get(k);\n      if (!node) node = render(it, k, i);\n      next.set(k, node);\n      if (node.previousSibling !== cursor) parent.insertBefore(node, cursor.nextSibling);\n      cursor = node;\n    }\n    for (const [k, n] of map) if (!next.has(k)) n.parentNode?.removeChild(n);\n    map.clear(); for (const [k, n] of next) map.set(k, n);\n  });\n  return anchor;\n}\n", "import { effect } from \"@usezeon/core\";\n\nexport function text(read: () => any): Text {\n  const t = document.createTextNode(\"\");\n  effect(() => { t.data = String(read() ?? \"\"); });\n  return t;\n}\n\nexport function attr(el: Element, name: string, read: () => any) {\n  effect(() => {\n    const v = read();\n    if (v == null || v === false) el.removeAttribute(name);\n    else el.setAttribute(name, v === true ? \"\" : String(v));\n  });\n}\n\ntype Child = Node | string | (() => any);\n\nexport function h(tag: string, props?: Record<string, any>, ...children: Child[]) {\n  const el = document.createElement(tag);\n  if (props) {\n    for (const [k, v] of Object.entries(props)) {\n      if (k.startsWith(\"on\") && typeof v === \"function\") {\n        el.addEventListener(k.slice(2).toLowerCase(), v);\n      } else if (typeof v === \"function\") {\n        attr(el, k, v as () => any);\n      } else if (v != null) {\n        el.setAttribute(k, String(v));\n      }\n    }\n  }\n  for (const c of children) {\n    if (typeof c === \"function\") el.append(text(c));\n    else el.append(c instanceof Node ? c : document.createTextNode(String(c)));\n  }\n  return el;\n}\n\nexport function mount(root: Element, node: Node) {\n  root.replaceChildren(node);\n}\n"],
  "mappings": ";;;;;AAEO,SAAS,OACd,MACA,QACA,OACA;AACA,QAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,QAAM,MAAM,oBAAI,IAA2B;AAC3C,SAAO,MAAM;AATf;AAUI,UAAM,SAAS,OAAO;AACtB,UAAM,QAAQ,KAAK,KAAK,CAAC;AACzB,UAAM,OAAO,oBAAI,IAA2B;AAC5C,QAAI,SAAe;AACnB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,KAAK,MAAM,CAAC;AAClB,YAAM,IAAI,MAAM,IAAI,CAAC;AACrB,UAAI,OAAO,IAAI,IAAI,CAAC;AACpB,UAAI,CAAC,KAAM,QAAO,OAAO,IAAI,GAAG,CAAC;AACjC,WAAK,IAAI,GAAG,IAAI;AAChB,UAAI,KAAK,oBAAoB,OAAQ,QAAO,aAAa,MAAM,OAAO,WAAW;AACjF,eAAS;AAAA,IACX;AACA,eAAW,CAAC,GAAG,CAAC,KAAK,IAAK,KAAI,CAAC,KAAK,IAAI,CAAC,EAAG,SAAE,eAAF,mBAAc,YAAY;AACtE,QAAI,MAAM;AAAG,eAAW,CAAC,GAAG,CAAC,KAAK,KAAM,KAAI,IAAI,GAAG,CAAC;AAAA,EACtD,CAAC;AACD,SAAO;AACT;;;ACzBO,SAAS,KAAK,MAAuB;AAC1C,QAAM,IAAI,SAAS,eAAe,EAAE;AACpC,SAAO,MAAM;AAAE,MAAE,OAAO,OAAO,KAAK,KAAK,EAAE;AAAA,EAAG,CAAC;AAC/C,SAAO;AACT;AAEO,SAAS,KAAK,IAAa,MAAc,MAAiB;AAC/D,SAAO,MAAM;AACX,UAAM,IAAI,KAAK;AACf,QAAI,KAAK,QAAQ,MAAM,MAAO,IAAG,gBAAgB,IAAI;AAAA,QAChD,IAAG,aAAa,MAAM,MAAM,OAAO,KAAK,OAAO,CAAC,CAAC;AAAA,EACxD,CAAC;AACH;AAIO,SAAS,EAAE,KAAa,UAAgC,UAAmB;AAChF,QAAM,KAAK,SAAS,cAAc,GAAG;AACrC,MAAI,OAAO;AACT,eAAW,CAAC,GAAG,CAAC,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC1C,UAAI,EAAE,WAAW,IAAI,KAAK,OAAO,MAAM,YAAY;AACjD,WAAG,iBAAiB,EAAE,MAAM,CAAC,EAAE,YAAY,GAAG,CAAC;AAAA,MACjD,WAAW,OAAO,MAAM,YAAY;AAClC,aAAK,IAAI,GAAG,CAAc;AAAA,MAC5B,WAAW,KAAK,MAAM;AACpB,WAAG,aAAa,GAAG,OAAO,CAAC,CAAC;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AACA,aAAW,KAAK,UAAU;AACxB,QAAI,OAAO,MAAM,WAAY,IAAG,OAAO,KAAK,CAAC,CAAC;AAAA,QACzC,IAAG,OAAO,aAAa,OAAO,IAAI,SAAS,eAAe,OAAO,CAAC,CAAC,CAAC;AAAA,EAC3E;AACA,SAAO;AACT;AAEO,SAAS,MAAM,MAAe,MAAY;AAC/C,OAAK,gBAAgB,IAAI;AAC3B;",
  "names": []
}
